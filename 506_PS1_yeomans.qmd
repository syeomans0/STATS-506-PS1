---
title: "STATS 506 - Problem Set #1"
author: "Sydney Yeomans"
format: html
editor: visual
---

## Problem 1

Download the data set about abalones (a type of sea snail) and do the following:

a.  Import the data into a data.frame and give the appropriate column names.

```{r}
#| echo: true
abalones_df <- read.csv("abalone.data", header = FALSE)
head(abalones_df)
```

```{r}
#| echo: true
#Rename the columns based on what is in the abalone name file, names of variables are the following:
#V1 = Sex, V2 = Length, V3 = Diameter, V4 = Height 
#V5 = Whole weight, V6 = Shucked weight, V7 = Viscera weight
#V8 = Shell weight, V9 = Rings

colnames(abalones_df) <- c("Sex", "Length", "Diameter", "Height", 
                           "Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight", "Rings")

head(abalones_df)

```

b.  The data contains information on three different sexes of abalone. Report the number of observations belonging to each sex.

```{r}
#| echo: true
table(abalones_df$Sex)
```

In this data set there are 1307 females, 1528 males, and 1342 infants.

c.  

    i.  Which weight has the highest correlation with rings?

```{r}
#| echo: true
#There are four different weights so need four correlations 
whole_cor <- cor(abalones_df$Whole_weight, abalones_df$Rings)
print(whole_cor)

shucked_cor <- cor(abalones_df$Shucked_weight, abalones_df$Rings)
print(shucked_cor)

viscera_cor <- cor(abalones_df$Viscera_weight, abalones_df$Rings)
print(viscera_cor)

shell_cor <- cor(abalones_df$Shell_weight, abalones_df$Rings)
print(shell_cor)
```

The weight with the highest correlation to rings is shell weight with a value of $.627$.

ii. For that weight, which sex has the highest correlation?

```{r}
#| echo: true
#Split the data set into three separate ones based on sex
males <- abalones_df[abalones_df$Sex == "M", ]
females <- abalones_df[abalones_df$Sex == "F", ]
infants <- abalones_df[abalones_df$Sex == "I", ]

#Now we can do the correlations for each for shell weight and rings
male_cor_shell <- cor(males$Shell_weight, males$Rings)
print(male_cor_shell)
female_cor_shell <- cor(females$Shell_weight, females$Rings)
print(female_cor_shell)
infant_cor_shell <- cor(infants$Shell_weight, infants$Rings)
print(infant_cor_shell)

```

The sex with the highest correlation between shell weight and rings is infants.

Source: <https://stackoverflow.com/questions/43347110/how-to-create-new-dataframe-from-existing-dataframe-selecting-rows-matching-two>

iii. What are the weights of the abalone with the most rings?

```{r}
#| echo: true

most_rings <- abalones_df[abalones_df$Rings == max(abalones_df$Rings),]
print(most_rings)

```

The most number of rings for an abalone in this data set is $29$. The weights of the abalone with this many rings is in the table above, but just in case I will list them out as well: whole_weight $=1.8075$, shucked_weight $=.7055$, viscera_weight $=.3215$, and shell_weight $=.475$.

Note: originally had the `max` function on its own, but the output looked bad so I moved it to the inside of the new data frame I created.

Source: <https://stackoverflow.com/questions/24212739/how-to-find-the-highest-value-of-a-column-in-a-data-frame-in-r>

iv. What percentage of abalones have a viscera weight larger than their shell weight?

```{r}
#| echo: true
viscera_greater_shell <- sum(abalones_df$Viscera_weight > abalones_df$Shell_weight)
viscera_greater_shell

#Total number of abalones are the number of observations in the data frame which is 4177
percentage <- 272/4177
percentage * 100
```
The percentage of abalones that have a viscera weight larger than their shell weight is $6.51\%$.

d. Create a table of correlations between weights and rings, within each sex. The columns should be the four weights, and the rows should be the sexes. 

```{r}
#| echo: true
#Have to find the correlations for each of the other weights: whole, shucked, and viscera within each sex
males_cor_whole <- cor(males$Whole_weight, males$Rings)
females_cor_whole <- cor(females$Whole_weight, females$Rings)
infants_cor_whole <- cor(infants$Whole_weight, infants$Rings)
  
males_cor_shucked <- cor(males$Shucked_weight, males$Rings)
females_cor_shucked <- cor(females$Shucked_weight, females$Rings)
infants_cor_shucked <- cor(infants$Shucked_weight, infants$Rings)

males_cor_viscera <- cor(males$Viscera_weight, males$Rings)
females_cor_viscera <- cor(females$Viscera_weight, females$Rings)
infants_cor_viscera <- cor(infants$Viscera_weight, infants$Rings)
  
  
#Create a table with these values: columns = weights, rows = sex
cor_table <- data.frame(whole_weight = c(males_cor_whole, females_cor_whole, infants_cor_whole), shucked_weight = c(males_cor_shucked, females_cor_shucked, infants_cor_shucked), viscera_weight = c(males_cor_viscera, females_cor_viscera, infants_cor_viscera), shell_weight = c(male_cor_shell,female_cor_shell, infant_cor_shell))
row.names(cor_table) <- c("Males", "Females", "Infants")

cor_table
  
```
This is a table that looks at the correlation between the four different weights of the data set and rings broken down by the three different sexes. 

e. Carry out a series of t-tests to examine whether the number of rings differs across the three sexes. Present the R output and interpret the results. 

```{r}
#| echo: true
#Have to compare M to F, M to I, and F to I
t.test(abalones_df$Rings[abalones_df$Sex == "M"], abalones_df$Rings[abalones_df$Sex == "F"])

t.test(abalones_df$Rings[abalones_df$Sex == "M"], abalones_df$Rings[abalones_df$Sex == "I"])

t.test(abalones_df$Rings[abalones_df$Sex == "F"], abalones_df$Rings[abalones_df$Sex == "I"])
```
From the t-test it can be seen that there is evidence that the number of rings differs across all three sexes, as seen from the very small p-values. 

## Problem 2

a. Import the food expenditures data frame

```{r}
#| echo: true
food_exp_df <- read.csv("food_expenditure.csv")
head(food_exp_df)
```

b. Clean up the variable names by simplifying them.

```{r}
#| echo: true
colnames(food_exp_df) <- c("ID", "Age", "Household_size", "State", "Currency", 
                           "Total_food_expenditure", "Grocery_cost", 
                           "Dining_out_cost", "Miscellaneous_cost", "Times_dine_out", 
                           "Alcohol", "Food_assist")
head(food_exp_df)
```

c. Restrict the data to those paying in US dollars (USD). Show that it worked by confirming the number of observations before and after restricting the data.

```{r}
#| echo: true
dim(food_exp_df)
nrow(food_exp_df)

#Restrict to only USD
food_exp_df <- food_exp_df[food_exp_df$Currency == "USD",]
nrow(food_exp_df)
```
For each of the following variables, clean them by removing any row with inappropriate data. For each variable, explain your rules for eliminating rows.

d. The variable related to age. Rules used to clean up the age variable: First, got rid of all minors below 18. And then, I got rid of anyone who was older than 100.

```{r}
#| echo: true
#First drop all NAs
food_exp_df <- na.omit(food_exp_df)
nrow(food_exp_df)

#Get rid of minors:
food_exp_df <- food_exp_df[food_exp_df$Age >= 18,]
nrow(food_exp_df)

#Get rid of any ages over 100: 
food_exp_df <- food_exp_df[food_exp_df$Age <= 100, ]
nrow(food_exp_df)
```

e. The variable related to state. Rules used to clean up the state variable: Get rid of the value in state called XX.

```{r}
#| echo: true
#get rid of XX state abbreviation
food_exp_df <- food_exp_df[food_exp_df$State != "XX",]
nrow(food_exp_df)
```

f. The four variables related to food expenditures. Rules to clean up the four food expenditures: For the all the food expenditure variables I got rid of any less than or equal to 0. Then

```{r}
#| echo: true
#get rid of 0s and negative values for all four variables related to food expenditures
food_exp_df <- food_exp_df[food_exp_df$Total_food_expenditure > 0,]
food_exp_df <- food_exp_df[food_exp_df$Grocery_cost > 0,]
food_exp_df <- food_exp_df[food_exp_df$Dining_out_cost > 0,]
food_exp_df <- food_exp_df[food_exp_df$Miscellaneous_cost > 0,]
nrow(food_exp_df)

#make sure total expenditure actually adds up all the expenditures? might be hard

```

g. The variable related to number of times dining out. Rules used to clean up the times dining out variable: 

```{r}
#| echo: true
#Want to get rid of the people who said they didn't eat out but had dining out cost > 0
```

h. Report your final number of observations after this cleaning.

```{r}
#| echo: true
dim(food_exp_df)
```


## Problem 3

a.  

```{r}
#| echo: true
```

b.  

```{r}
#| echo: true
```

c.  

```{r}
#| echo: true
```
